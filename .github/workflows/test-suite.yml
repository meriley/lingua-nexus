name: NLLB Translation System Test Suite

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
    
    - name: Install Python dependencies
      working-directory: ./server
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Lint with flake8
      working-directory: ./server
      run: |
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Type check with mypy
      working-directory: ./server
      run: |
        mypy app/ --ignore-missing-imports
    
    - name: Run unit tests
      working-directory: ./server
      run: |
        pytest tests/unit/ -v --cov=app --cov-report=xml --cov-report=term-missing
    
    - name: Run integration tests
      working-directory: ./server
      run: |
        pytest tests/integration/ -v --cov=app --cov-append --cov-report=xml --cov-report=term-missing
    
    - name: Run performance tests
      working-directory: ./server
      run: |
        pytest tests/performance/ -v --tb=short
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./server/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      working-directory: ./server
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Start server
      working-directory: ./server
      run: |
        export API_KEY=test_api_key
        python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
    
    - name: Health check
      run: |
        curl -f http://localhost:8000/health || exit 1
    
    - name: API integration test
      run: |
        response=$(curl -s -X POST "http://localhost:8000/translate" \
          -H "Content-Type: application/json" \
          -H "X-API-Key: test_api_key" \
          -d '{"text": "Hello world", "source_lang": "eng_Latn", "target_lang": "fra_Latn"}')
        echo "Response: $response"
        echo "$response" | grep -q "translated_text" || exit 1

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Bandit security scan
      working-directory: ./server
      run: |
        pip install bandit[toml]
        bandit -r app/ -f json -o bandit-report.json || true
        bandit -r app/ || exit 0
    
    - name: Run Safety dependency scan
      working-directory: ./server
      run: |
        pip install safety
        safety check --json --output safety-report.json || exit 0
        safety check || exit 0

  docker-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      working-directory: ./server
      run: |
        docker build -t nllb-translate:test .
    
    - name: Test Docker container
      run: |
        docker run -d --name test-container -p 8001:8000 \
          -e API_KEY=test_api_key \
          nllb-translate:test
        sleep 15
        
        # Health check
        curl -f http://localhost:8001/health || exit 1
        
        # Translation test
        response=$(curl -s -X POST "http://localhost:8001/translate" \
          -H "Content-Type: application/json" \
          -H "X-API-Key: test_api_key" \
          -d '{"text": "Hello", "source_lang": "eng_Latn", "target_lang": "spa_Latn"}')
        echo "$response" | grep -q "translated_text" || exit 1
        
        docker stop test-container
        docker rm test-container